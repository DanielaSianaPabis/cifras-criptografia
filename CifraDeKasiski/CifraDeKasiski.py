from collections import Counter

def decriptar_texto(texto_cifrado, tamanho_chave):
    chave = []
    #Para cada posição de cada letra da chave, é feita uma iteralção
    for i in range(tamanho_chave):
        letras_posicoes = texto_cifrado[i::tamanho_chave] #tupla de inicio ao fim
        letra_mais_comum = Counter(letras_posicoes).most_common(1)[0][0]
        
        #Deslocamento para o E, considerando apenas letras maiusculas
        deslocamento = (ord(letra_mais_comum.upper()) - ord('E')) % 26
        caracter_chave = chr(ord('A') + deslocamento)
        chave.append(caracter_chave)

    texto_decifrado = []
    for i, caracter in enumerate(texto_cifrado):
        if caracter.isalpha(): 
            deslocamento = ord(chave[i % tamanho_chave]) - ord('A')
            
            #Para letras maiusculas e minusculas
            if caracter.islower():
                caracter_decifrado = chr((ord(caracter) - ord('a') - deslocamento) % 26 + ord('a'))
            else:
                caracter_decifrado = chr((ord(caracter) - ord('A') - deslocamento) % 26 + ord('A'))
            texto_decifrado.append(caracter_decifrado)
        else:
            texto_decifrado.append(caracter) 

    #Converte listas em strings 
    chave_final = ''
    for caracter in chave:
        chave_final += caracter

    texto_decifrado_final = ''
    for caracter in texto_decifrado:
        texto_decifrado_final += caracter

    return texto_decifrado_final, chave_final

#Chave: CRYPTO
#texto_cifrado = "VYCEKCDCCBLCHTPNIHQXPPIVARLSLSEICRRGAJRTFGHLPCBGJRLXGHGICHMWPXYEIZKTYIBCPFDRHAOLLXVOVZMCMVGFPNBBVYGHIORVPPMVGFPNHTUVAGXQAJWHMSOJGHWSXVJDISFKFTTDRIMPVVKJMCTHJVMGXHKTYAESXVJPGRKJGCMSPUCSMCEFKEESOVLIMVGKPTTHOVLIYCWEBXGGVRLSTFFNMGDGQEAGRDVFEGTDJPRWXFGRBTMOKCCSLHWUWXLACUCDYHJVKPGMUKYCWOTURNISUFDRHRGJYCWQKGFTKGCEBDYHJVUPRGQWZGXOMZLVMVGDUTPWNCZTFCTVADGQGILTWKKKFIASIVLTKONDYIASORRXVONJRGNQVLPTTBFGPDISTKGTLCHJCRKSEPQNLHGDQIASVICPMAGERXLZKDGIXRKEATKHCZLLTMUWGGLHVYCGXOTVRWKSGXCCXFCCRNISUFDHXQTVANLMUKCBVCPTCPEAGERHRGVVKHBBECSSBBIJSRAAGKFDWGCJGCOWUZZAXWPBADGQGRJXGUCDCHLOIVGCTBKELDVSPKRTQHQIGCTTCBCRHJGIGCZQTPNIHUTRKDKCVYCGFSVYMSLWPNFXVVVYCTQWUKCCVSQWRWXAGJQPZSKJADGQGRJTWTTFKIASGECBRDTZTPVMUPQIXAUWMGXLCDNAXGRVCRAWPMCGLWQEGCPVKTFHISEZYAXEWZNBXBVZQGXEWZPTWHQICRHJGIRWXAGJQPZSVISTLSEICRRGAJRTFGYYCGXHJVKTTBKEEDYHJVKTLGCXCXLQQEATTZGUZNVWRYCGVCFVCIVONKFDNUJZRHXLKJRTGQGZQCHHJZBSXBCEBIASGECBRWURQHNAGURDAOXVYCRGRVAXTZGHSXIAGERCXQGJQPKMVFGCMSTTCEMOPUPTVCTURWXHTRLHFWVKCSLWIEYAPSEFLHBRGIMCEMVYCIAWTURNISEFLRXONDCCMGAJRTFOTVNGBACIGARORJWRACNFEXVONGPDUZGDYCWDTZTPVMUPQIXAURRTVVPFJDZWERJDGSUVADGRNPRWXHTVYIFSPKGHEWOZRTWHQKFTVOUVMUWWUTPTMSKEDDKACKGDGKJVPTMVGDCHLOIVRDUSGEAXIVGICSVCPJGHMGQWYHXEWVLRXCHUGHVFGKCHRADFJHXOEYAWHGGEDGHACWGCBHGJCIMVGJCHRADFJHFOASCAXHVVPHBBCCYCZICXCLHFFJMUTZCEEJTUGRKEEWVLBTESXVJHHTCHSPGHKQCSLDGVAWHFXZBTHGKXLPESVTZJMHJVKPBBGDNWTGKJYCWHJZLZBBIYYHUSGEADGQGILTWKKKFIASERQTHTNVRIXFUKFTIORVPXLRKMGSXRKERDMVTVCETFVJRWXACZLGXGWCRHPWNCLDPPGSPXXTNPQJFACIGOXRVYCUBFUKNPKHFVYALKKKFIASDRQXVACKFTFOVZAPEGVISRMITVMULSEICRRGAJRTFGCJGCVCODSCBQCKGDGHJVMGRONRLVNOIVGHVCPJGSXFGURDUSTVNGXGGERTWPARQIHQJRQIBQRIMRXGUNFXVVRIMSNQGJYSBGEICIXGGHSTGQGFDHRADFJHBBCTADKRCEATPWVYQDFSUPQIXAQWNGHPCSGABHKVQPLGQTGPMSFNGIAONRLVNOIVRWXFGZQPVSTKYXGDCIYBXHGIBLAWEYUTVONCRWXFGUSCWOPTWDYHJVJPGUWRETWAGRQJKSUZLPLSPJCWHKOLAWTHGORXGHJVJPGUWRETVOPSCGXRWTCSBBNVLVMVYZRWHIVCMHBBIRLNBBHFPBTHKFLPLOUZKEESGOYBIZGJGCVSWRJLTMUWMAECYJOXGSPXJXLVYFPSLHJVSBTMDVMBBHVVBLBHJFSIECUJADGGKUCGTPNVPTWIEKGDGGCICEHGUZZAXWPVLVEWUYBJXHQKFTLHCKGHMWERJHMFWTRJKSQWRWXZCEEJTUGKFTAWIYDGXEWVLRBSUFDRXFVRGCESVKCGLCTNMGWGGKAGXRWEBPGQAZQDYQGERGTZKDNDKHCEATBBVYCHMIFPMULSEICRRGAJRTFGCJCRKSEPQNLHGDGHWSHZLTWODJRGTQVCWPLOUVRDYHTRLHYCTDYIBCPJMUHBGJNPVSVYCHXHQWNDLGKSJTFSUJYVXGKERDTGGTMCWGRRATMVGJCIHTRFQHBPNVAGRDVFEGTAUVYRADCIRXVINRPIKOPJDDKACKGDGCHKFTLSVTMGKSUGMCWGVFCCVWRYCGBBINGIAORRPIBQWCYGDSAKFTMFCEQUHFORRXHBURPTLIRGMHXRTVTTKGKSJTGCPJGCZINRPHHHJRRJGWSLCSXQKGFTKWPXGHICUJGQESYYCCMVGBCNBGMEMLGSCTFZXMCEBIASTVDDKSGRAWMFCEQUHFORRXHBKJYHLIOVBIHVCMCPGORIGDKWRIMQTPKCGIROUJMRBOVVBLBHJZRIASRIMQTPKCGIRCHTFDHGKEEIAOVBCNLWOZJPKZAVYRADQJQXUZGDCHLOIVGHTGULKTWHQYYKXOPRQHHQKRRTWORIGDKWRIMQTPKCGIRRGKCGFWPVBQRHJVSCWSTCWXGUUKMRAOUKGRIFQTCHLHJVQTIFQSYQBZKKGTLTQIRWXJCIGDNGMVWHTBFDCHLOIVQPKSCTRJTZNPRWXSPVKNVFAGRPGONPQILORIGDKWRIMQTPKCGIBSUWMGMVGTFDBQGJGCJIGJRXHBCEBGXDTVQTGHJZQPIFKFPXDBQNJTWGFDIASUZRJTHKFLIHIUVRWXGAJRTFOMVWXLTKIQILSNVAIXRCEBHXBVKMIASTVATBJKEEEHWPKRWXQJFGRXCHRITRRGKCGFWPVQPIOTKGRNZCIRGTBUWMGFOVZMCBBVYCHXHHFPBBBIKFTLMUKCBMVGEYBXGURETBGUVJTVHGUYCWHJVNPKHKTSATFVIYCLTQIKPMWQEADKFGJNDGRKEEIHHJVQTESEKCSDSARNEEWGURDMVKJKTLGCXCIHDTFBJVSCTPNIHQXPPFHJZQRKMRKMVKOOZQIKOPJKXMHGURDMVGICRXWXZLVICKERQROEYYCGSNRLSFOASCXGHGIATIHGUZNMVGVLTFMCKRWXFGTCXOWPXCCWHJVGCOSTJCDYHJVNPKHKTSATFVIYCLTQIKPMWQEGHTDRCGTWHQKFTVFAGRDZFCDRDKSEFTTKHJVMGBUKEYAFSUJYVXWHKFTXBGDWXGHGIATIHUKFTVFAGRDZFCDFTVOPTYAVINRRTYFQDGIMVGRNDLHGIGDKWRIMQTPKCGIBSUFDIASXRPXHIUGMHLWDCCBXGURETLOPUITRGYYGRAAKXFIAOXVNGHRWTCSMVKJAGRDVFEGTAVYGHLSVFDPICUKCGBCTZNGHPCSGABHKVQRHBUKGINHGJFXLYPFUAXRIVMUMVGBCNTBFDCHLOIVYUMSTKFTBBVVPRXDVZMCDBQNJTWUGZQIAIUZBTGHKWGTWKKKFPLSVFDEKCRFQXMWQEQWTJKEEPLGQTGPMSFGPDUODZJXMWGJRWXQCCAJEOVZMCHTVYCPICUKCGBCTZNGHPCSGABHKVQXLHJVETGSTRJXSSFGPDUZGDMUVFAGRPGONPQXL"


#Frase para testar e confirmar que a cifra funciona:

#Chave: KEY
texto_cifrado ="DLCBIUKWYNSEXEKOHPYGIIVMMOWCSUXIPGEQKRMVHKKRRRIMVHKKRJSZCNEJYRCSRFSWFYYQOSLOHYIXFOSJNQYXGYVPCNELKQZEPYXGCLIAKYQOLCGEQRETSREDVMEFJOFPOERRMLQVMMOWLEPUIBFIPIPMEHJIERDLCKQZEPYXGCGSPUIPCAFORRRIWDSMULGCQYCXCBXMDLCKQZEPYXGCBSAUCRBMCNXMBYLKJROVRRIKGLCXXFOCBBSTOXMDLCOQCBKCXGWBSMWFSDLCMSSVHLDOCOTSZAGDLRRIYWFSVELMIURILDLCYPBWELGILDLMWIYPXCBSLOACOOFOGMEPBXXDSRBBSAUCPYGIIAYCQGCWGXKFOEQUIBRMQXIGQLZYVQSJRRIWCEUBSAUCZEXRRIWRETORMDWCORRBSAUCMXIBKCFOACXXRYXFOTYBOFOWYGEJYWRKRBPSSXHNSGREVCYJYNSEKXRKGFOHRYERBICKRBSXUKWPYGII"

#texto_cifrado = "NFOXVIYCOLQCYWSXQLLLBZMXWDRKUYEAFKGUZBZQPOSCMAGHVZ"
tamanho_chave = 3
texto_decifrado, chave = decriptar_texto(texto_cifrado, tamanho_chave)

print(f"\nChave Encontrada: {chave}\n")
print("Texto Decifrado:\n")
print(texto_decifrado)

